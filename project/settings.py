"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
import environ
from corsheaders.defaults import default_headers
from django.utils.translation import gettext_lazy as _
from pathlib import Path
import firebase_admin
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Initialize environment variables
env = environ.Env(
    DEBUG=(bool, False),
    SECRET_KEY=(str, ''),
    ALLOWED_HOSTS=(list, []),
    CORS_ALLOWED_ORIGINS=(list, []),
    CSRF_TRUSTED_ORIGINS=(list, []),
    SECURE_SSL_REDIRECT=(bool, False),
)

# Read .env file
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

LOGIN_REDIRECT_URL = "/"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY', default='django-insecure--pv1n!%sr_ny^-5oqu72ije32z%1cl$qq#24pw&2as#h6o6!mh')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG', default=False)  # Changed default to False for security

ALLOWED_HOSTS = env('ALLOWED_HOSTS', default=[])


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # External Applications
    "corsheaders",
    "storages",
    "rest_framework",
    "rest_framework.authtoken",
    "phonenumber_field",
    "django_filters",
    "debug_toolbar",
    "rosetta",
    "import_export",
    "drf_spectacular",
    "django_celery_beat",
    "push_notifications",
    # Internal Applications
    "market",
    "accounts",
    "profiles",
    "offers",
    "finance",
    "shop",
    "ads",
    "invoices",
    "inventory",
    "notifications",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
]

ROOT_URLCONF = "project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
            "libraries": {
                "math": "project.templatetags.math",
                "utils": "project.templatetags.utils",
                "admin.urls": "django.contrib.admin.templatetags.admin_urls",
            },
        },
    },
]

WSGI_APPLICATION = "project.wsgi.application"

AUTH_USER_MODEL = "accounts.User"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': env('DB_NAME', default='defaultdb'),
        'USER': env('DB_USER', default='doadmin'),
        'PASSWORD': env('DB_PASSWORD'),  # SECURITY: Must be set in .env file
        'HOST': env('DB_HOST', default='pharmasky-db-do-user-17921548-0.h.db.ondigitalocean.com'),
        'PORT': env('DB_PORT', default='25060'),
        'OPTIONS': {
            'sslmode': 'require',
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

INTERNAL_IPS = [
    "127.0.0.1",
]

DEFAULT_RENDERER_CLASSES = (
    "rest_framework.renderers.JSONRenderer",
    "rest_framework.renderers.BrowsableAPIRenderer",
)

# if DEBUG:
#     DEFAULT_RENDERER_CLASSES += ("rest_framework.renderers.BrowsableAPIRenderer",)

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
        "core.authentication.APIKeyAuthentication",  # API Key for AI Agent service
    ],
    "DEFAULT_FILTER_BACKENDS": (
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.SearchFilter",
        "rest_framework.filters.OrderingFilter",
    ),
    "DEFAULT_PAGINATION_CLASS": "core.views.abstract_paginations.CustomPageNumberPagination",
    "DEFAULT_RENDERER_CLASSES": DEFAULT_RENDERER_CLASSES,
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "PAGE_SIZE": 20,
    "ORDERING_PARAM": "o",
    "EXCEPTION_HANDLER": "core.exception_handlers.exception_handler",
}

SPECTACULAR_SETTINGS = {
    "TITLE": "PHARMASKY",
    "DESCRIPTION": "PHARMASKY API",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
}

DATA_UPLOAD_MAX_NUMBER_FIELDS = 100000

# Static files (CSS, JavaScript, Images)
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATIC_URL = "/static/"
STATICFILES_DIRS = (BASE_DIR / "project/static",)

# Media files (User uploads)
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = "/media/"

# DigitalOcean Spaces Configuration
AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID', default='')
AWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY', default='')
AWS_STORAGE_BUCKET_NAME = env('AWS_STORAGE_BUCKET_NAME', default='pharmasky-media')
AWS_S3_ENDPOINT_URL = env('AWS_S3_ENDPOINT_URL', default='https://pharmasky-media.fra1.digitaloceanspaces.com')
AWS_S3_REGION_NAME = env('AWS_S3_REGION_NAME', default='fra1')
AWS_S3_SIGNATURE_VERSION = 's3v4'
AWS_DEFAULT_ACL = None
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}
AWS_LOCATION = env('AWS_LOCATION', default='media')

# Storage configuration
if DEBUG:
    # Use local storage for development
    STORAGES = {
        "default": {
            "BACKEND": "django.core.files.storage.FileSystemStorage",
        },
        "staticfiles": {
            "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
        },
    }
else:
    # Use DigitalOcean Spaces for production
    STORAGES = {
        "default": {
            "BACKEND": "storages.backends.s3.S3Storage",
            "OPTIONS": {
                "access_key": AWS_ACCESS_KEY_ID,
                "secret_key": AWS_SECRET_ACCESS_KEY,
                "bucket_name": AWS_STORAGE_BUCKET_NAME,
                "default_acl": AWS_DEFAULT_ACL,
                "location": AWS_LOCATION,
                "verify": True,
                "endpoint_url": AWS_S3_ENDPOINT_URL,
                "signature_version": AWS_S3_SIGNATURE_VERSION,
                "region_name": AWS_S3_REGION_NAME,
                "object_parameters": AWS_S3_OBJECT_PARAMETERS,
            },
        },
        "staticfiles": {
            "BACKEND": "storages.backends.s3.S3StaticStorage",
            "OPTIONS": {
                "access_key": AWS_ACCESS_KEY_ID,
                "secret_key": AWS_SECRET_ACCESS_KEY,
                "bucket_name": AWS_STORAGE_BUCKET_NAME,
                "default_acl": AWS_DEFAULT_ACL,
                "location": "static",
                "verify": True,
                "endpoint_url": AWS_S3_ENDPOINT_URL,
                "signature_version": AWS_S3_SIGNATURE_VERSION,
                "region_name": AWS_S3_REGION_NAME,
                "object_parameters": AWS_S3_OBJECT_PARAMETERS,
            },
        },
    }

# Update URLs for production
if not DEBUG:
    STATIC_URL = f"{AWS_S3_ENDPOINT_URL}/static/"
    MEDIA_URL = f"{AWS_S3_ENDPOINT_URL}/{AWS_LOCATION}/"

# CORS Settings
CORS_ALLOWED_ORIGINS = env('CORS_ALLOWED_ORIGINS', default=[])
CSRF_TRUSTED_ORIGINS = env('CSRF_TRUSTED_ORIGINS', default=[])

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = list(default_headers) + [
    "X-Timezone", 
    "content-disposition",
    "X-API-Key",  # Allow API Key header for AI Agent service
]
CORS_EXPOSE_HEADERS = ["Content-Disposition"]

# AI Agent Service Configuration
AI_AGENT_API_KEY = env('AI_AGENT_API_KEY', default='change-this-in-production')

# Internationalization
ROSETTA_SHOW_AT_ADMIN_PANEL = True

LANGUAGES = [
    ("ar", _("Arabic")),
    ("en", _("English")),
]

LOCALE_PATHS = (os.path.join(BASE_DIR, "locale/"),)

# Security Settings
SECURE_SSL_REDIRECT = env('SECURE_SSL_REDIRECT', default=False)

if not DEBUG:
    SECURE_HSTS_SECONDS = 30
    SECURE_HSTS_PRELOAD = True
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# Logging Configuration
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {"format": "%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s"},
        "simple": {"format": "%(levelname)s %(asctime)s %(message)s"},
    },
    "filters": {"require_debug_false": {"()": "django.utils.log.RequireDebugFalse"}},
    "handlers": {
        "mail_admins": {
            "level": "DEBUG",
            "filters": ["require_debug_false"],
            "class": "django.utils.log.AdminEmailHandler",
        },
        "console": {
            "level": "DEBUG",
            "formatter": "verbose",
            "class": "logging.StreamHandler",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "propagate": False,
            "level": "INFO",
        },
        "django.request": {
            "handlers": ["console"],
            "level": "DEBUG",
            "propagate": True,
        },
    },
}

# Firebase Admin SDK Initialization
try:
    FIREBASE_CREDENTIALS_PATH = env("FIREBASE_CREDENTIALS", default=os.path.join(BASE_DIR, 'pharmasky-2a5a3-firebase-adminsdk-fbsvc-4aa69c05c7.json'))
    FIREBASE_CREDENTIALS = firebase_admin.credentials.Certificate(FIREBASE_CREDENTIALS_PATH)
    firebase_admin.initialize_app(FIREBASE_CREDENTIALS)
except Exception as e:
    print(f"Firebase initialization failed: {e}")
    # Continue without Firebase for development

PUSH_NOTIFICATIONS_SETTINGS = {"UPDATE_ON_DUPLICATE_REG_ID": True}

# Celery Settings
CELERYD_BROKER_URL = env("CELERY_BROKER", default='redis://localhost:6379/0')
CELERYD_ACCEPT_CONTENT = ["application/json"]
CELERYD_RESULT_SERIALIZER = "json"
CELERYD_TASK_SERIALIZER = "json"
CELERYD_BROKER_CONNECTION_RETRY_ON_STARTUP = True
CELERYD_RESULT_BACKEND = env("CELERY_BACKEND", default='redis://localhost:6379/0')
CELERYD_TIMEZONE = "UTC"
CELERYD_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"
# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
###################
# CUSTOM SETTINGS #
###################

MINIMUM_PHARMACY_INVOICE_SUB_TOTAL = 600
MAX_RETURN_PERIOD_IN_DAYS = 7

# AI Agent Settings
OPENAI_API_KEY = env('OPENAI_API_KEY', default='')
DIGITALOCEAN_AGENT_URL = env('DIGITALOCEAN_AGENT_URL', default='https://rh7hum3gky53ykah274mdpkl.agents.do-ai.run')
